public static readonly int[] WritableAttrs = new int[17]
{
  31000,
  31001,
  31002,
  31003,
  31004,
  31005,
  31006,
  31007,
  31017,
  31009,
  31016,
  31100,
  31101,
  31102,
  31103,
  31104,
  31105
};
private readonly string[] _alarms = new string[16]
{
  "",
  "Battery voltage is too Low",
  "Over load",
  "Battery voltage is too high",
  "parameter error",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  ""
};
private readonly Dictionary<int, string> _faults = new Dictionary<int, string>()
{
  [0] = "",
  [2] = "Inverter over temperature",
  [3] = "Battery voltage is too high",
  [4] = "Battery voltage is too low",
  [5] = "Output short circuited",
  [6] = "Inverter output voltage is high",
  [7] = "over load",
  [11] = "Main relay failed",
  [41] = "Inverter grid voltage is low",
  [42] = "Inverter grid voltage is high",
  [43] = "Inverter grid under frequency",
  [44] = "Inverter grid over frequency",
  [45] = "AVR failed",
  [51] = "Inverter over current protection error",
  [58] = "Inverter output voltage is too low"
};

[NotMapped]
[Modbus(30000, 1.0, false)]
public ushort MachineType { get; set; }

[NotMapped]
[Modbus(30001, 1.0, false)]
public ushort SoftwareVersion { get; set; }

[Modbus(30002, 1.0, false)]
public ushort WorkState { get; set; }

[NotMapped]
[Modbus(30003, 1.0, false)]
public ushort BatClass { get; set; }

[Modbus(30004, 1.0, false)]
public ushort RatedPower { get; set; }

[Modbus(30005, 0.1, true)]
public double GridVoltage { get; set; }

[Modbus(30006, 0.1, true)]
public double GridFrequency { get; set; }

[Modbus(30007, 0.1, true)]
public double OutputVoltage { get; set; }

[Modbus(30008, 0.1, true)]
public double OutputFrequency { get; set; }

[Modbus(30009, 0.1, true)]
public double LoadCurrent { get; set; }

[Modbus(30010, 1.0, false)]
public ushort LoadPower { get; set; }

[Modbus(30012, 1.0, false)]
public ushort LoadPercent { get; set; }

[Modbus(30013, 1.0, false)]
public ushort LoadState { get; set; }

[Modbus(30014, 0.1, true)]
public double BatteryVoltage { get; set; }

[Modbus(30015, 0.1, true)]
public double BatteryCurrent { get; set; }

[Modbus(30017, 1.0, false)]
public ushort BatterySoc { get; set; }

[Modbus(30018, 1.0, false)]
public ushort TransformerTemp { get; set; }

[Modbus(30019, 1.0, false)]
public ushort AvrState { get; set; }

[Modbus(30020, 1.0, false)]
public ushort BuzzerState { get; set; }

[Modbus(30021, 1.0, false)]
public ushort FaultId { get; set; }

[Modbus(30022, 1.0, false)]
public ushort AlarmId { get; set; }

[Modbus(30023, 1.0, false)]
public ushort ChargeState { get; set; }

[Modbus(30024, 1.0, false)]
public ushort ChargeFlag { get; set; }

[Modbus(30025, 1.0, false)]
public ushort MainSw { get; set; }

[Modbus(30026, 1.0, false)]
public ushort DelayType { get; set; }

public string Fault { get; set; }

public string Alarm { get; set; }

[NotMapped]
[Modbus(31000, 1.0, false)]
public ushort GridFrequencyType { get; set; }

[NotMapped]
[Modbus(31001, 1.0, false)]
public ushort GridVoltageType { get; set; }

[NotMapped]
[Modbus(31002, 0.1, true)]
public double ShutdownVoltage { get; set; }

[NotMapped]
[Modbus(31003, 0.1, true)]
public double AbsorptionChargeVoltage { get; set; }

[NotMapped]
[Modbus(31004, 0.1, true)]
public double FloatChargeVoltage { get; set; }

[NotMapped]
[Modbus(31005, 1.0, false)]
public ushort BulkCurrent { get; set; }

[NotMapped]
[Modbus(31006, 1.0, false)]
public ushort Buzzer { get; set; }

[NotMapped]
[Modbus(31007, 1.0, false)]
public ushort EnableGridCharge { get; set; }

[NotMapped]
[Modbus(31009, 1.0, false)]
public ushort EnableBacklight { get; set; }

[NotMapped]
[Modbus(31016, 1.0, false)]
public ushort UtilityPowerOn { get; set; }

[NotMapped]
[Modbus(31017, 1.0, false)]
public ushort EnableOverLoadRecover { get; set; }

protected override void Animation()
{
  VarDevicePartsStates devicePartsStates = new VarDevicePartsStates()
  {
    PvState = PartState.Unsupported
  };
  if (this.WorkState == (ushort) 4 || this.WorkState == (ushort) 7)
    devicePartsStates.AcCur = CurState.Discharge;
  devicePartsStates.AcState = this.GridVoltage >= 50.0 ? PartState.Connected : PartState.Disconnected;
  devicePartsStates.BattCur = this.ChargeFlag == (ushort) 1 ? CurState.Charge : CurState.Discharge;
  devicePartsStates.BattState = this.AlarmId != (ushort) 0 ? PartState.Warning : PartState.Connected;
  if (this.WorkState == (ushort) 5)
    devicePartsStates.CoreState = PartState.Warning;
  if (this.AlarmId != (ushort) 0)
    devicePartsStates.LoadState = PartState.Warning;
  if (this.LoadPower > (ushort) 0)
  {
    devicePartsStates.LoadState = PartState.Connected;
    devicePartsStates.LoadCur = CurState.Charge;
  }
  else
    devicePartsStates.LoadState = PartState.Disconnected;
  this.DevicesStates = devicePartsStates;
}

protected override void Parse()
{
  this.Fault = this._faults.ContainsKey((int) this.FaultId) ? this._faults[(int) this.FaultId] : string.Format("Unknown FaultId {0}", (object) this.FaultId);
  this.Alarm = Helper.ModbusValueConvter<string[]>(new int?((int) this.AlarmId), this._alarms, true);
}

[Modbus(31100, 1.0, false)]
[NotMapped]
public ushort BatteryVoltageCC { get; set; }

[Modbus(31101, 1.0, false)]
[NotMapped]
public ushort BatteryChargeCurrentCC { get; set; }

[Modbus(31102, 1.0, false)]
[NotMapped]
public ushort GridVoltageCC { get; set; }

[Modbus(31103, 1.0, false)]
[NotMapped]
public ushort OutputVoltageCC { get; set; }

[Modbus(31104, 1.0, false)]
[NotMapped]
public ushort LoadCurrentCC { get; set; }

[Modbus(31105, 1.0, false)]
[NotMapped]
public ushort BatteryDischargeCurrentCC { get; set; }